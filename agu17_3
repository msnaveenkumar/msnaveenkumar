package com.qmetry.qaf.example.test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Utility class for handling JSON operations such as counting fields,
 * comparing JSON values with UI values, and extracting nested fields.
 */
public class JsonUtils {

    public static void main(String[] args) {
        // Example JSON response string
        String jsonResponse = "{ \"datasets\": [{"
                + "\"name\": \"Test Automation_Dataset_01\","
                + "\"format\": \"Protobuf\","
                + "\"reports\": [{ \"catalogId\": \"82fed24e-053d-4023-a505-0b2e4ad8b26f\" },"
                + "{ \"catalogId\": \"2c779268-c730-40db-9cfc-6a8d79892a43\" }],"
                + "\"boundaries\": { \"geography\": \"Boundary Geography | Undefined\","
                + "\"Product\": \"(Finance) Asset-Backed Securities\","
                + "\"process\": \"3rd Party Management (TDR: L2 BP0001135)\" },"
                + "\"description\": \"Testing Datasets in SDH\","
                + "\"dgcDataDomains\": { \"Global DGC Glossary\": [{ \"domainName\": \"Financial Performance & Analytics Data\" }] },"
                + "\"datasetElements\": [{ \"name\": \"SDH Autoamation_DatasetElement_01\","
                + "\"description\": \"Testing Datasets in SDH\","
                + "\"reportAttributes\": [{ \"catalogId\": \"68839111-045e-4634-b79e-d686638c057c\" },"
                + "{ \"catalogId\": \"87bb7fd3-6116-4945-8ec1-b8a64d1ca7cc\" }],"
                + "\"systemDataElements\": [{ \"name\": \"SDH_SDE_Automation_02\","
                + "\"systemKey\": \"2f05ebf2-2b4f-49bd-82e2-0c5bff134073\" },"
                + "{ \"name\": \"SDH_SDE_Automation_01\","
                + "\"systemKey\": \"ee7eae54-393d-4f6d-a9ad-e6e8f92894a1\" }] }],"
                + "\"upstreamDatasets\": [{ \"name\": \"DS_1503_932\","
                + "\"producerEonId\": 932 },"
                + "{ \"name\": \"40761_DS2\","
                + "\"producerEonId\": 932 },"
                + "{ \"name\": \"choir_ccar_constant_xva_crv_feed.gz\","
                + "\"producerEonId\": 932 },"
                + "{ \"name\": \"DS_1503_932\","
                + "\"producerEonId\": 932 }],"
                + "\"systemDataElements\": [{ \"name\": \"SDH_SDE_Automation_02\","
                + "\"systemKey\": \"2f05ebf2-2b4f-49bd-82e2-0c5bff134073\" },"
                + "{ \"name\": \"SDH_SDE_Automation_01\","
                + "\"systemKey\": \"ee7eae54-393d-4f6d-a9ad-e6e8f92894a1\" }] }] }";

        // Example usage of counting fields
        int geographyCount = getNestedFieldCount(jsonResponse, "boundaries", "geography");
        int datasetElementsNameCount = getNestedFieldCount(jsonResponse, "datasetElements", "name");
        int upstreamDatasetsNameCount = getNestedFieldCount(jsonResponse, "upstreamDatasets", "name");
        int upstreamDatasetsProducerEonIdCount = getNestedFieldCount(jsonResponse, "upstreamDatasets", "producerEonId");

        System.out.println("Geography Count in Boundaries: " + geographyCount); // Expected: 1
        System.out.println("Dataset Elements Name Count: " + datasetElementsNameCount); // Expected: 1
        System.out.println("Upstream Datasets Name Count: " + upstreamDatasetsNameCount); // Expected: 4
        System.out.println("Upstream Datasets ProducerEonId Count: " + upstreamDatasetsProducerEonIdCount); // Expected: 4
    }

    /**
     * Compares field values from a JSON response with UI values.
     *
     * @param jsonResponse The JSON response string to parse.
     * @param fieldName The field name in the JSON to compare.
     * @param nestedFieldName The nested field name whose values are compared.
     * @param expectedValues The list of expected values extracted from JSON.
     * @param uiValues The list of values from the UI to compare with.
     * @return True if the values match, false otherwise.
     */
    public static boolean compareFieldWithUI(String jsonResponse, String fieldName, String nestedFieldName,
                                             List<String> expectedValues, List<String> uiValues) {
        List<String> jsonValues = extractFieldValues(parseJson(jsonResponse), fieldName, nestedFieldName);

        // Compare the lists and return if they match
        return jsonValues.equals(uiValues);
    }

    /**
     * Counts the number of items in a specific field in the JSON response.
     *
     * @param jsonResponse The JSON response string to parse.
     * @param fieldName The field name to count.
     * @return The count of items in the specified field.
     */
    public static int getFieldCount(String jsonResponse, String fieldName) {
        JsonNode rootNode = parseJson(jsonResponse);

        if (rootNode != null && rootNode.has(fieldName) && rootNode.get(fieldName).isArray()) {
            return rootNode.get(fieldName).size();
        }
        return 0;
    }

    /**
     * Parses a JSON string and counts occurrences of a specified field.
     * If a nested node is specified, it counts occurrences within that nested node.
     *
     * @param jsonResponse The JSON response string to parse.
     * @param fieldName The field name to count.
     * @param nestedNodeName (Optional) The name of the nested node to search within.
     * @return The count of occurrences of the specified field.
     */
    public static int getNestedFieldCount(String jsonResponse, String fieldName, String nestedNodeName) {
        JsonNode rootNode = parseJson(jsonResponse);

        if (rootNode != null) {
            if (nestedNodeName != null && !nestedNodeName.isEmpty()) {
                return countItemsNested(rootNode, fieldName, nestedNodeName);
            } else {
                return countItems(rootNode, fieldName);
            }
        } else {
            return 0;
        }
    }

    /**
     * Parses a JSON string into a JsonNode.
     *
     * @param jsonResponse The JSON response string to parse.
     * @return The root JsonNode of the parsed JSON.
     */
    private static JsonNode parseJson(String jsonResponse) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            return mapper.readTree(jsonResponse);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Extracts values of a nested field from a specified field in a JsonNode.
     *
     * @param rootNode The root JsonNode to search within.
     * @param fieldName The field name to search for.
     * @param nestedFieldName The nested field name whose values are extracted.
     * @return A list of values extracted from the nested field.
     */
    private static List<String> extractFieldValues(JsonNode rootNode, String fieldName, String nestedFieldName) {
        List<String> values = new ArrayList<>();

        if (rootNode != null && rootNode.has(fieldName) && rootNode.get(fieldName).isArray()) {
            for (JsonNode item : rootNode.get(fieldName)) {
                if (item.has(nestedFieldName)) {
                    values.add(item.get(nestedFieldName).asText());
                }
            }
        }

        return values;
    }

    /**
     * Counts the occurrences of a field within a nested node.
     * Useful when the field is within an array or object nested inside another field.
     *
     * @param rootNode The root JsonNode of the JSON.
     * @param fieldName The field name to count.
     * @param nestedNodeName The name of the nested node to search within.
     * @return The count of occurrences within the nested node.
     */
    private static int countItemsNested(JsonNode rootNode, String fieldName, String nestedNodeName) {
        JsonNode nestedNode = rootNode.get(nestedNodeName);
        if (nestedNode != null && nestedNode.isArray()) {
            int count = 0;
            for (JsonNode item : nestedNode) {
                count += countFieldOccurrences(item, fieldName);
            }
            return count;
        }
        return 0;
    }

    /**
     * Recursively counts occurrences of a specific field in a JsonNode.
     * Useful for searching nested JSON structures.
     *
     * @param node The JsonNode to search.
     * @param fieldName The field name to count.
     * @return The count of occurrences of the field.
     */
    private static int countFieldOccurrences(JsonNode node, String fieldName) {
        int count = 0;

        if (node.has(fieldName)) {
            count++;
        }

        for (Iterator<Map.Entry<String, JsonNode>> it = node.fields(); it.hasNext(); ) {
            Map.Entry<String, JsonNode> field = it.next();
            JsonNode childNode = field.getValue();

            if (childNode.isObject() || childNode.isArray()) {
                count += countFieldOccurrences(childNode, fieldName);
            }
        }

        return count;
    }

    /**
     * Counts the number of items within a specific field.
     * Useful for counting elements in an array field.
     *
     * @param node The JsonNode to search within.
     * @param fieldName The field name to count.
     * @return The count of items in the field.
     */
    private static int countItems(JsonNode node, String fieldName) {
        JsonNode fieldNode = node.get(fieldName);
        if (fieldNode != null && fieldNode.isArray()) {
            return fieldNode.size();
        }
        return 0;
    }
}
