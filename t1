package com.qmetry.qaf.example.test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class Final2Test {

    private JsonNode rootNode;

    @BeforeEach
    void setUp() throws IOException {
        // Load the JSON file before each test
        ObjectMapper mapper = new ObjectMapper();
        File jsonFile = new File("test.json");
        rootNode = mapper.readTree(jsonFile);
    }

    @Test
    void testCountItems() {
        JsonNode datasetNode = rootNode.get("datasets").get(0);

        // Assertions based on your expected counts
        assertEquals(1, Final2.countItems(datasetNode, "reports"), "Reports field should have 1 occurrence");
        assertEquals(1, Final2.countItems(datasetNode, "boundaries"), "Boundaries field should have 1 occurrence");
        assertEquals(1, Final2.countItems(datasetNode, "dgcDataDomains"), "DgcDataDomains field should have 1 occurrence");
        assertEquals(1, Final2.countItems(datasetNode, "datasetElements"), "DatasetElements field should have 1 occurrence");
        assertEquals(4, Final2.countItems(datasetNode, "upstreamDatasets"), "UpstreamDatasets field should have 4 occurrences");
        assertEquals(2, Final2.countItems(datasetNode, "systemDataElements"), "SystemDataElements field should have 2 occurrences");
        assertEquals(1, Final2.countItems(datasetNode, "name"), "Name field should have 1 occurrence");
        assertEquals(1, Final2.countItems(datasetNode, "format"), "Format field should have 1 occurrence");
        assertEquals(1, Final2.countItems(datasetNode, "description"), "Description field should have 1 occurrence");
    }

    @Test
    void testCountItemsNested() {
        JsonNode datasetNode = rootNode.get("datasets").get(0);

        // Assertions based on your expected counts
        assertEquals(2, Final2.countItemsNested(datasetNode, "systemKey", "systemDataElements"), "SystemDataElements should have 2 systemKey occurrences");
        assertEquals(1, Final2.countItemsNested(datasetNode, "name", "upstreamDatasets"), "UpstreamDatasets should have 1 name occurrence");
    }
}
