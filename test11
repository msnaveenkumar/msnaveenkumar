
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class JsonParser {

    // Generic method to parse JSON, count elements, and return values for a specific key
    public static List<String> parseAndVerifyJson(File jsonFile, String elementKeyToVerify) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        JsonNode rootNode = mapper.readTree(jsonFile);

        // Print JSON content
        System.out.println("JSON Content:");
        System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode));

        // Count elements in datasets, boundaries, etc.
        countAndPrintElements(rootNode, "datasets");
        countAndPrintElements(rootNode, "boundaries");
        // Add more keys as needed...

        // Get all values associated with the specified key
        return getElementValues(rootNode, elementKeyToVerify);
    }

    // Method to count elements by key
    private static void countAndPrintElements(JsonNode rootNode, String key) {
        JsonNode elementsNode = rootNode.get(key);
        if (elementsNode != null && elementsNode.isArray()) {
            int count = elementsNode.size();
            System.out.println("Number of elements in '" + key + "': " + count);
        } else {
            System.out.println("No elements found for key: " + key);
        }
    }

    // Method to retrieve all values associated with a specific key
    private static List<String> getElementValues(JsonNode rootNode, String key) {
        List<String> values = new ArrayList<>();
        findAllValues(rootNode, key, values);
        return values;
    }

    // Recursive method to find all values of a key in the JSON tree
    private static void findAllValues(JsonNode node, String key, List<String> values) {
        if (node.has(key)) {
            values.add(node.get(key).asText());
        }
        Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
        while (fields.hasNext()) {
            Map.Entry<String, JsonNode> field = fields.next();
            JsonNode childNode = field.getValue();
            if (childNode.isObject()) {
                findAllValues(childNode, key, values);
            } else if (childNode.isArray()) {
                for (JsonNode arrayItem : childNode) {
                    if (arrayItem.isObject()) {
                        findAllValues(arrayItem, key, values);
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        try {
            File jsonFile = new File("path/to/your/jsonfile.json");
            String elementKeyToVerify = "description";  // The key you want to verify

            List<String> values = parseAndVerifyJson(jsonFile, elementKeyToVerify);

            // Print all found values for the key
            System.out.println("Values for key '" + elementKeyToVerify + "':");
            for (String value : values) {
                System.out.println(value);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
